#!/bin/bash

#set -x -v
set -e

if expr "$0" : '.*/.*' >/dev/null 2>&1 ; then
  cmdDir=`dirname $0`
else
  cmdDir='.'
fi
if test -r $cmdDir/coin-functions ; then
  . $cmdDir/coin-functions
else
  echo "Cannot find utility functions file coin-functions; exiting."
  exit 1
fi

# figure out name of project from repo URL, remove possible .git suffix
topProjName=`git remote get-url origin`
topProjName=${topProjName##*/}
topProjName=${topProjName/.git/}
echo "Project        : $topProjName"

branchName=`git rev-parse --abbrev-ref HEAD`
echo "Branch         : $branchName"

if [[ "$branchName" != stable/* ]] ; then
  echo "ERROR: Expected branchname to start with 'stable/"
  exit 1
fi


# get tags from remote
git fetch -t

# get last release from current stable branch
lastRelease=`git tag --list "${branchName/stable/releases}*" | sort -V | tail -1`
echo "Last Release   : $lastRelease"

# figure out new release number
if [ -z "$lastRelease" ] ; then
  # no last release, then take stable version and add .0
  if [[ "$branchName" =~ ^stable/([0-9][0-9]*)\.([0-9][0-9]*) ]] ; then
    majVer=${BASH_REMATCH[1]}
    minVer=${BASH_REMATCH[2]}
    relVer=0
  else
    echo "ERROR: Branchname does not match stable/xx.yy"
    exit 1
  fi
elif [[ "$lastRelease" =~ ^releases/([0-9][0-9]*)\.([0-9][0-9]*)\.([0-9][0-9]*)$ ]] ; then
  majVer=${BASH_REMATCH[1]}
  minVer=${BASH_REMATCH[2]}
  relVer=${BASH_REMATCH[3]}
  (( relVer += 1 ))
else
  echo "ERROR: Last release name does not match releases/xx.yy.zz format"
  exit 1
fi
newVer=${majVer}.${minVer}.${relVer}

echo "New release    : releases/$newVer"

isNormal=yes
if test $isNormal = yes ; then
  newLTCurrent=`calcLibtoolCurrentGit $majVer $minVer`
  newLTRevision=$relVer
  newLTAge=`calcLibtoolAgeGit $majVer $minVer`
  (( newLTAge -= 1 ))
  newLTVer=${newLTCurrent}:${newLTRevision}:${newLTAge}
  echo "Libtool version: $newLTVer"
fi

# Find configure.ac files for the package and project and update the version.
# We have no externals at this point, so there will be
# two files for a normal project, one for a ThirdParty or Data project, and
# none for BuildTools.

echo ''
echo "===> Checking for configure.ac files ..."
confac_files=`find . -name 'configure.ac' -print`

if test -n "$confac_files" ; then

# Take the attitude that [] around parameters in AC_INIT is optional,
# it's the commas that count. This does make for a surpassing ugly regular
# expression.  A comma in the version string will cause a spectacular failure.
# In AC_COIN_PROJECTDIR_INIT, take the attitude that there is one parameter
# with the PMs choosen project name which is preserved and we only add a
# libtool version number afterwards.

  echo ''
  echo "===> Updating version numbers in configure.ac files ..."
  for i in $confac_files; do
    sed -i -e "s|AC_INIT\(.*\),\(\[*\)[^],]*\(\]*\),\(.*\)|AC_INIT\1,\2$newVer\3,\4|" $i
    sed -i -e "s|AC_COIN_PROJECTDIR_INIT(\(.*\))|AC_COIN_PROJECTDIR_INIT\(\1,$newLTCurrent:$newLTRevision:$newLTAge\)|" $i
    git diff $i
  done
else
  echo "    ... none to process."
fi

# Find config_proj_default.h. If there's a definition for PROJ_VERSION, adjust it and
# add config_proj_default.h.bak to the list of files to be restored.

configFileLoc=`find . -name 'config_*_default.h' -print`
if test -n "$configFileLoc" ; then
  versionSym=${topProjName^^}_VERSION
  echo ''
  echo "===> Updating $versionSym in $configFileLoc (if present)"
  echo ''
  sed -i -e "s/# *define $versionSym .*\$/#define $versionSym \"$newVer\"/" \
    -e "s/# *define ${versionSym}_MAJOR .*\$/#define ${versionSym}_MAJOR $majVer/" \
    -e "s/# *define ${versionSym}_MINOR .*\$/#define ${versionSym}_MINOR $minVer/" \
    -e "s/# *define ${versionSym}_RELEASE .*\$/#define ${versionSym}_RELEASE $relVer/" \
    $configFileLoc
  git diff $configFileLoc
fi

if [ $topProjName != BuildTools ] ; then
  echo ''
  echo '===> Running BuildTools/run_autotools ...'
  echo ''
  
  [ -e BuildTools ] && mv BuildTools BuildTools.bak
  
  # TODO checkout BuildTools according to info in Dependencies, if present, instead of using $cmdDir

  $cmdDir/run_autotools
  
  [ -e BuildTools.bak ] && mv BuildTools.bak BuildTools
fi

echo ''
echo '===> Committing changes and creating tag ...'
echo ''

git checkout -b release-$newVer
git commit -a -m "version number updates for release $newVer"
git tag releases/$newVer
git checkout releases/$newVer
git branch -d release-$newVer

echo ''
echo 'After reviewing the output above, you can push the new release by ...'
echo ''
echo "   git push -u origin releases/$newVer"
echo ''
echo 'Alternatively, you can forget the locally committed release by'
echo ''
echo "   git tag -d releases/$newVer"
echo "   git checkout stable/$newVer"
