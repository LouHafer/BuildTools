#!/bin/bash

#set -x -v
set -e

if expr "$0" : '.*/.*' >/dev/null 2>&1 ; then
  cmdDir=`dirname $0`
else
  cmdDir='.'
fi
if test -r $cmdDir/coin-functions ; then
  . $cmdDir/coin-functions
else
  echo "Cannot find utility functions file coin-functions; exiting."
  exit 1
fi

# figure out name of project from repo URL, remove possible .git suffix
topProjName=`git remote get-url origin`
topProjName=${topProjName##*/}
topProjName=${topProjName/.git/}
echo "Project: $topProjName"

# TODO figure this out automatically
if [[ "$1" =~ ^releases/([0-9][0-9]*)\.([0-9][0-9]*)\.([0-9][0-9]*)$ ]] ; then
  majVer=${BASH_REMATCH[1]}
  minVer=${BASH_REMATCH[2]}
  relVer=${BASH_REMATCH[3]}
else
  echo "Expect release name of the format releases/xx.yy.zz as first argument; exiting."
  exit 1
fi
newVer=${majVer}.${minVer}.${relVer}

echo "Release version: $newVer"

isNormal=yes
if test $isNormal = yes ; then
  newLTCurrent=`calcLibtoolCurrentGit $majVer $minVer`
  newLTRevision=$relVer
  newLTAge=`calcLibtoolAgeGit $majVer $minVer`
  (( newLTAge -= 1 ))
  newLTVer=${newLTCurrent}:${newLTRevision}:${newLTAge}
  echo "Libtool version: $newLTVer"
fi

# Find configure.ac files for the package and project and update the version.
# We have no externals at this point, so there will be
# two files for a normal project, one for a ThirdParty or Data project, and
# none for BuildTools.

echo ''
echo "===> Checking for configure.ac files ..."
confac_files=`find . -name 'configure.ac' -print`

if test -n "$confac_files" ; then

# Take the attitude that [] around parameters in AC_INIT is optional,
# it's the commas that count. This does make for a surpassing ugly regular
# expression.  A comma in the version string will cause a spectacular failure.
# In AC_COIN_PROJECTDIR_INIT, take the attitude that there is one parameter
# with the PMs choosen project name which is preserved and we only add a
# libtool version number afterwards.

  echo ''
  echo "===> Updating version numbers in configure.ac files ..."
  for i in $confac_files; do
    sed -i -e "s|AC_INIT\(.*\),\(\[*\)[^],]*\(\]*\),\(.*\)|AC_INIT\1,\2$newVer\3,\4|" $i
    sed -i -e "s|AC_COIN_PROJECTDIR_INIT(\(.*\))|AC_COIN_PROJECTDIR_INIT\(\1,$newLTCurrent:$newLTRevision:$newLTAge\)|" $i
    git diff $i
  done
else
  echo "    ... none to process."
fi

# Find config_proj_default.h. If there's a definition for PROJ_VERSION, adjust it and
# add config_proj_default.h.bak to the list of files to be restored.

configFileLoc=`find . -name 'config_*_default.h' -print`
if test -n "$configFileLoc" ; then
  versionSym=${topProjName^^}_VERSION
  echo ''
  echo "===> Updating $versionSym in $configFileLoc (if present)"
  echo ''
  sed -i -e "s/# *define $versionSym .*\$/#define $versionSym \"$newVer\"/" \
    -e "s/# *define ${versionSym}_MAJOR .*\$/#define ${versionSym}_MAJOR $majVer/" \
    -e "s/# *define ${versionSym}_MINOR .*\$/#define ${versionSym}_MINOR $minVer/" \
    -e "s/# *define ${versionSym}_RELEASE .*\$/#define ${versionSym}_RELEASE $relVer/" \
    $configFileLoc
  git diff $configFileLoc
fi


# The Dependencies file in a stable branch should contain only stable
# and release references (trunk is flagged as an error below). The overall
# algorithm is to convert Dependencies to use releases.

# Now generate the proper externals for the release.  Each line in a
# Dependencies file has the format <ext_name> <ext_url>.  Normally, each
# <ext_url> should be a stable branch.  References to stable branches will be
# converted to references to releases unless the reference is to a project
# in the stableExternals list (in which case it'll be converted at the very
# end). References to releases are not changed. References to trunk are an
# error. Failure to find a release for an external not in the stableExternals
# list is an error. Save the existing Dependencies.

srcDepFile=Dependencies
if test -r Dependencies ; then

  echo ''
  echo "===> Checking externals in $srcDepFile ..."
  echo ''

# Because we're working directly from command output, the regular expression
# must check for lines.

  mv $srcDepFile $srcDepFile.bak
  ext_name=
  ext_url=
  for i in `cat $srcDepFile.bak`; do
    if test "$ext_name" = ""; then
      ext_name="$i"
    else
      ext_url=$i
      if expr "$ext_name" : '#.*' 2>&1 >/dev/null ; then
        echo "    $ext_name $ext_url ==> skipped"
        ext_name=
        continue
      fi
      ext_urltype=`extractTypeFromURL $ext_url`
      ext_proj=`extractProjFromURL $ext_url`

# See if this external should be dropped.

      if expr "$exciseExternals" : '.*'$ext_proj'.*' 2>&1 > /dev/null ; then
        echo "    $ext_name $ext_url ==> excised"
        ext_name=
        continue
      fi

# External must be a stable or a release.

      if test $ext_urltype != stable && test $ext_urltype != release ; then
        echo ''
        echo "===> The external URL $ext_url is not a stable branch or release. Exiting."
        echo ''
        exit 2
      fi

      ext_isNormal=`isNormalURL $ext_url`

# Convert stable branches to releases unless listed in stableExternals.
# Existing releases are unchanged.

      if test $ext_urltype = stable ; then
        if expr "$stableExternals" : '.*'"$ext_proj"'.*' 2>&1 >/dev/null ; then
          echo "    $ext_name $ext_url unchanged"
          ext_rel_url=$ext_url
        else
          ext_majVer=`extractMajorFromURL $ext_url`
          ext_minVer=`extractMinorFromURL $ext_url`
          ext_rel_url=`bestRelease $ext_url $ext_majVer $ext_minVer`
          if test -z "$ext_rel_url" ; then
            echo ''
            echo "===> No release for $ext_url. Exiting."
            echo ''
            exit 2
          fi
          # Normal (not BuildTools/ThirdParty/Data) need a directory name,
          # and it may differ from the project name. Carefully preserve it.
          if test $ext_isNormal = yes ; then
            ext_tail=`extractTailFromExt $ext_url`
            ext_rel_url=${ext_rel_url}${ext_tail}
          fi
          echo "    $ext_name $ext_url ==> $ext_rel_url"
        fi
      else
        ext_rel_url=$ext_url
        echo "    $ext_name $ext_url ==> unchanged"
      fi

      echo "$ext_name  $ext_rel_url" >> Dependencies
      ext_name=
    fi
  done
  rm $srcDepFile.bak
fi

if [ $topProjName != BuildTools ] ; then
  echo ''
  echo '===> Running BuildTools/run_autotools ...'
  echo ''
  
  [ -e BuildTools ] && mv BuildTools BuildTools.bak
  
  $cmdDir/run_autotools
  
  [ -e BuildTools.bak ] && mv BuildTools.bak BuildTools
fi

echo ''
echo '===> Committing changes and creating tag ...'
echo ''

git checkout -b release-$newVer
git commit -a -m "version number updates for release $newVer"
git tag releases/$newVer
git checkout releases/$newVer
git branch -d release-$newVer

echo ''
echo 'After reviewing the output above, you can push the new release by ...'
echo ''
echo "   git push -u origin releases/$newVer"
echo ''
echo 'Alternatively, you can forget the locally committed release by'
echo ''
echo "   git tag -d releases/$newVer"
echo "   git checkout stable/$newVer"
